// protobuf/uRPC.proto
//
//
// Envelopes are the encapsulation layer around the request and reply messages
// in a ZMQ messaging pattern. This way, the actual API (request/reply) is 
// independent of the transport machinery.
//
// Application refers to the OSI 7 applications.


import "Log.proto";

package urpc.pb;

// ZMQ Request-Reply Pattern
// ZMQ_REQ, ZMQ_REP, ZMQ_SNDMORE, ZMQ_RCVMORE

message RequestEnvelope {
  optional string service = 1;        // Serivce called
  optional int32 version = 2;         // Version of the service called
  optional bytes request = 3;         // Protobuf of service parameters
}
message ReplyEnvelope {
  optional bool error = 1;            // True if error occured
  optional bytes reply = 2;           // Protobuf of the reply's content
  repeated Log log = 3;               // Logs associated with creating reply
}

// ZMQ Publish-Subscribe Pattern
// ZMQ_PUB, ZMQ_SUB

// ZMQ Exclusive Pair Pattern
// ZMQ_PAIR

// ZMQ Parallelized Pipeline Pattern
// ZMQ_UPSTREAM, ZMQ_DOWNSTREAM


// Application. Application Layer (OSI 7) 

message Application {
  enum Protocol {
    TCP = 1;
    UDP = 2;
  }
  optional string service = 1;    // symbolic name e.g. http
  optional Protocol protocol = 2; // transport protocol 
  optional string name = 3;       // fully qualified domain name
  optional int32 ttl = 4;         // time to live field
  optional int32 priority = 5;    // target priority, lower is more preferred
  optional int32 weight = 6;      // relative weight for given priority
  optional int32 port = 7;        // service port
}

message ApplicationList {
  repeated Application application = 1;
}
