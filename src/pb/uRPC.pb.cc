// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "uRPC.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace urpc {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* RequestEnvelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestEnvelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyEnvelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyEnvelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* Application_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Application_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Application_Protocol_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ApplicationList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplicationList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_uRPC_2eproto() {
  protobuf_AddDesc_uRPC_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "uRPC.proto");
  GOOGLE_CHECK(file != NULL);
  RequestEnvelope_descriptor_ = file->message_type(0);
  static const int RequestEnvelope_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEnvelope, service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEnvelope, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEnvelope, request_),
  };
  RequestEnvelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestEnvelope_descriptor_,
      RequestEnvelope::default_instance_,
      RequestEnvelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEnvelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEnvelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestEnvelope));
  ReplyEnvelope_descriptor_ = file->message_type(1);
  static const int ReplyEnvelope_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyEnvelope, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyEnvelope, reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyEnvelope, log_),
  };
  ReplyEnvelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyEnvelope_descriptor_,
      ReplyEnvelope::default_instance_,
      ReplyEnvelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyEnvelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyEnvelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyEnvelope));
  Application_descriptor_ = file->message_type(2);
  static const int Application_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, ttl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, port_),
  };
  Application_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Application_descriptor_,
      Application::default_instance_,
      Application_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Application));
  Application_Protocol_descriptor_ = Application_descriptor_->enum_type(0);
  ApplicationList_descriptor_ = file->message_type(3);
  static const int ApplicationList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationList, application_),
  };
  ApplicationList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplicationList_descriptor_,
      ApplicationList::default_instance_,
      ApplicationList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplicationList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_uRPC_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestEnvelope_descriptor_, &RequestEnvelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyEnvelope_descriptor_, &ReplyEnvelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Application_descriptor_, &Application::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplicationList_descriptor_, &ApplicationList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_uRPC_2eproto() {
  delete RequestEnvelope::default_instance_;
  delete RequestEnvelope_reflection_;
  delete ReplyEnvelope::default_instance_;
  delete ReplyEnvelope_reflection_;
  delete Application::default_instance_;
  delete Application_reflection_;
  delete ApplicationList::default_instance_;
  delete ApplicationList_reflection_;
}

void protobuf_AddDesc_uRPC_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::urpc::pb::protobuf_AddDesc_Log_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nuRPC.proto\022\007urpc.pb\032\tLog.proto\"D\n\017Requ"
    "estEnvelope\022\017\n\007service\030\001 \001(\t\022\017\n\007version\030"
    "\002 \001(\005\022\017\n\007request\030\003 \001(\014\"H\n\rReplyEnvelope\022"
    "\r\n\005error\030\001 \001(\010\022\r\n\005reply\030\002 \001(\014\022\031\n\003log\030\003 \003"
    "(\0132\014.urpc.pb.Log\"\270\001\n\013Application\022\017\n\007serv"
    "ice\030\001 \001(\t\022/\n\010protocol\030\002 \001(\0162\035.urpc.pb.Ap"
    "plication.Protocol\022\014\n\004name\030\003 \001(\t\022\013\n\003ttl\030"
    "\004 \001(\005\022\020\n\010priority\030\005 \001(\005\022\016\n\006weight\030\006 \001(\005\022"
    "\014\n\004port\030\007 \001(\005\"\034\n\010Protocol\022\007\n\003TCP\020\001\022\007\n\003UD"
    "P\020\002\"<\n\017ApplicationList\022)\n\013application\030\001 "
    "\003(\0132\024.urpc.pb.Application", 425);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "uRPC.proto", &protobuf_RegisterTypes);
  RequestEnvelope::default_instance_ = new RequestEnvelope();
  ReplyEnvelope::default_instance_ = new ReplyEnvelope();
  Application::default_instance_ = new Application();
  ApplicationList::default_instance_ = new ApplicationList();
  RequestEnvelope::default_instance_->InitAsDefaultInstance();
  ReplyEnvelope::default_instance_->InitAsDefaultInstance();
  Application::default_instance_->InitAsDefaultInstance();
  ApplicationList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_uRPC_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_uRPC_2eproto {
  StaticDescriptorInitializer_uRPC_2eproto() {
    protobuf_AddDesc_uRPC_2eproto();
  }
} static_descriptor_initializer_uRPC_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RequestEnvelope::kServiceFieldNumber;
const int RequestEnvelope::kVersionFieldNumber;
const int RequestEnvelope::kRequestFieldNumber;
#endif  // !_MSC_VER

RequestEnvelope::RequestEnvelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestEnvelope::InitAsDefaultInstance() {
}

RequestEnvelope::RequestEnvelope(const RequestEnvelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestEnvelope::SharedCtor() {
  _cached_size_ = 0;
  service_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = 0;
  request_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestEnvelope::~RequestEnvelope() {
  SharedDtor();
}

void RequestEnvelope::SharedDtor() {
  if (service_ != &::google::protobuf::internal::kEmptyString) {
    delete service_;
  }
  if (request_ != &::google::protobuf::internal::kEmptyString) {
    delete request_;
  }
  if (this != default_instance_) {
  }
}

void RequestEnvelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestEnvelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestEnvelope_descriptor_;
}

const RequestEnvelope& RequestEnvelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uRPC_2eproto();  return *default_instance_;
}

RequestEnvelope* RequestEnvelope::default_instance_ = NULL;

RequestEnvelope* RequestEnvelope::New() const {
  return new RequestEnvelope;
}

void RequestEnvelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service()) {
      if (service_ != &::google::protobuf::internal::kEmptyString) {
        service_->clear();
      }
    }
    version_ = 0;
    if (has_request()) {
      if (request_ != &::google::protobuf::internal::kEmptyString) {
        request_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestEnvelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string service = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service().data(), this->service().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }
      
      // optional int32 version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_request;
        break;
      }
      
      // optional bytes request = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestEnvelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string service = 1;
  if (has_service()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service(), output);
  }
  
  // optional int32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->version(), output);
  }
  
  // optional bytes request = 3;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->request(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestEnvelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string service = 1;
  if (has_service()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service(), target);
  }
  
  // optional int32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->version(), target);
  }
  
  // optional bytes request = 3;
  if (has_request()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->request(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestEnvelope::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string service = 1;
    if (has_service()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service());
    }
    
    // optional int32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }
    
    // optional bytes request = 3;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->request());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestEnvelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestEnvelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestEnvelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestEnvelope::MergeFrom(const RequestEnvelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service()) {
      set_service(from.service());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_request()) {
      set_request(from.request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestEnvelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestEnvelope::CopyFrom(const RequestEnvelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestEnvelope::IsInitialized() const {
  
  return true;
}

void RequestEnvelope::Swap(RequestEnvelope* other) {
  if (other != this) {
    std::swap(service_, other->service_);
    std::swap(version_, other->version_);
    std::swap(request_, other->request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestEnvelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestEnvelope_descriptor_;
  metadata.reflection = RequestEnvelope_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyEnvelope::kErrorFieldNumber;
const int ReplyEnvelope::kReplyFieldNumber;
const int ReplyEnvelope::kLogFieldNumber;
#endif  // !_MSC_VER

ReplyEnvelope::ReplyEnvelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyEnvelope::InitAsDefaultInstance() {
}

ReplyEnvelope::ReplyEnvelope(const ReplyEnvelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyEnvelope::SharedCtor() {
  _cached_size_ = 0;
  error_ = false;
  reply_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyEnvelope::~ReplyEnvelope() {
  SharedDtor();
}

void ReplyEnvelope::SharedDtor() {
  if (reply_ != &::google::protobuf::internal::kEmptyString) {
    delete reply_;
  }
  if (this != default_instance_) {
  }
}

void ReplyEnvelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyEnvelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyEnvelope_descriptor_;
}

const ReplyEnvelope& ReplyEnvelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uRPC_2eproto();  return *default_instance_;
}

ReplyEnvelope* ReplyEnvelope::default_instance_ = NULL;

ReplyEnvelope* ReplyEnvelope::New() const {
  return new ReplyEnvelope;
}

void ReplyEnvelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = false;
    if (has_reply()) {
      if (reply_ != &::google::protobuf::internal::kEmptyString) {
        reply_->clear();
      }
    }
  }
  log_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyEnvelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reply;
        break;
      }
      
      // optional bytes reply = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reply()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_log;
        break;
      }
      
      // repeated .urpc.pb.Log log = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_log;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyEnvelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->error(), output);
  }
  
  // optional bytes reply = 2;
  if (has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->reply(), output);
  }
  
  // repeated .urpc.pb.Log log = 3;
  for (int i = 0; i < this->log_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->log(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyEnvelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->error(), target);
  }
  
  // optional bytes reply = 2;
  if (has_reply()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->reply(), target);
  }
  
  // repeated .urpc.pb.Log log = 3;
  for (int i = 0; i < this->log_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->log(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyEnvelope::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool error = 1;
    if (has_error()) {
      total_size += 1 + 1;
    }
    
    // optional bytes reply = 2;
    if (has_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reply());
    }
    
  }
  // repeated .urpc.pb.Log log = 3;
  total_size += 1 * this->log_size();
  for (int i = 0; i < this->log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyEnvelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyEnvelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyEnvelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyEnvelope::MergeFrom(const ReplyEnvelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  log_.MergeFrom(from.log_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_reply()) {
      set_reply(from.reply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyEnvelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyEnvelope::CopyFrom(const ReplyEnvelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyEnvelope::IsInitialized() const {
  
  return true;
}

void ReplyEnvelope::Swap(ReplyEnvelope* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(reply_, other->reply_);
    log_.Swap(&other->log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyEnvelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyEnvelope_descriptor_;
  metadata.reflection = ReplyEnvelope_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Application_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Application_Protocol_descriptor_;
}
bool Application_Protocol_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Application_Protocol Application::TCP;
const Application_Protocol Application::UDP;
const Application_Protocol Application::Protocol_MIN;
const Application_Protocol Application::Protocol_MAX;
const int Application::Protocol_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Application::kServiceFieldNumber;
const int Application::kProtocolFieldNumber;
const int Application::kNameFieldNumber;
const int Application::kTtlFieldNumber;
const int Application::kPriorityFieldNumber;
const int Application::kWeightFieldNumber;
const int Application::kPortFieldNumber;
#endif  // !_MSC_VER

Application::Application()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Application::InitAsDefaultInstance() {
}

Application::Application(const Application& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Application::SharedCtor() {
  _cached_size_ = 0;
  service_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  protocol_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ttl_ = 0;
  priority_ = 0;
  weight_ = 0;
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Application::~Application() {
  SharedDtor();
}

void Application::SharedDtor() {
  if (service_ != &::google::protobuf::internal::kEmptyString) {
    delete service_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Application::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Application::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Application_descriptor_;
}

const Application& Application::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uRPC_2eproto();  return *default_instance_;
}

Application* Application::default_instance_ = NULL;

Application* Application::New() const {
  return new Application;
}

void Application::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service()) {
      if (service_ != &::google::protobuf::internal::kEmptyString) {
        service_->clear();
      }
    }
    protocol_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    ttl_ = 0;
    priority_ = 0;
    weight_ = 0;
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Application::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string service = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service().data(), this->service().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_protocol;
        break;
      }
      
      // optional .urpc.pb.Application.Protocol protocol = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::urpc::pb::Application_Protocol_IsValid(value)) {
            set_protocol(static_cast< ::urpc::pb::Application_Protocol >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ttl;
        break;
      }
      
      // optional int32 ttl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ttl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ttl_)));
          set_has_ttl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_priority;
        break;
      }
      
      // optional int32 priority = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_weight;
        break;
      }
      
      // optional int32 weight = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_port;
        break;
      }
      
      // optional int32 port = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Application::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string service = 1;
  if (has_service()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service(), output);
  }
  
  // optional .urpc.pb.Application.Protocol protocol = 2;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->protocol(), output);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional int32 ttl = 4;
  if (has_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ttl(), output);
  }
  
  // optional int32 priority = 5;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->priority(), output);
  }
  
  // optional int32 weight = 6;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->weight(), output);
  }
  
  // optional int32 port = 7;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Application::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string service = 1;
  if (has_service()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service(), target);
  }
  
  // optional .urpc.pb.Application.Protocol protocol = 2;
  if (has_protocol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->protocol(), target);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional int32 ttl = 4;
  if (has_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ttl(), target);
  }
  
  // optional int32 priority = 5;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->priority(), target);
  }
  
  // optional int32 weight = 6;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->weight(), target);
  }
  
  // optional int32 port = 7;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Application::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string service = 1;
    if (has_service()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service());
    }
    
    // optional .urpc.pb.Application.Protocol protocol = 2;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 ttl = 4;
    if (has_ttl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ttl());
    }
    
    // optional int32 priority = 5;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }
    
    // optional int32 weight = 6;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weight());
    }
    
    // optional int32 port = 7;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Application::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Application* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Application*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Application::MergeFrom(const Application& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service()) {
      set_service(from.service());
    }
    if (from.has_protocol()) {
      set_protocol(from.protocol());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ttl()) {
      set_ttl(from.ttl());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Application::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Application::CopyFrom(const Application& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Application::IsInitialized() const {
  
  return true;
}

void Application::Swap(Application* other) {
  if (other != this) {
    std::swap(service_, other->service_);
    std::swap(protocol_, other->protocol_);
    std::swap(name_, other->name_);
    std::swap(ttl_, other->ttl_);
    std::swap(priority_, other->priority_);
    std::swap(weight_, other->weight_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Application::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Application_descriptor_;
  metadata.reflection = Application_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplicationList::kApplicationFieldNumber;
#endif  // !_MSC_VER

ApplicationList::ApplicationList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplicationList::InitAsDefaultInstance() {
}

ApplicationList::ApplicationList(const ApplicationList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplicationList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplicationList::~ApplicationList() {
  SharedDtor();
}

void ApplicationList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplicationList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplicationList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplicationList_descriptor_;
}

const ApplicationList& ApplicationList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uRPC_2eproto();  return *default_instance_;
}

ApplicationList* ApplicationList::default_instance_ = NULL;

ApplicationList* ApplicationList::New() const {
  return new ApplicationList;
}

void ApplicationList::Clear() {
  application_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplicationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .urpc.pb.Application application = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_application:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_application()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_application;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplicationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .urpc.pb.Application application = 1;
  for (int i = 0; i < this->application_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->application(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplicationList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .urpc.pb.Application application = 1;
  for (int i = 0; i < this->application_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->application(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplicationList::ByteSize() const {
  int total_size = 0;
  
  // repeated .urpc.pb.Application application = 1;
  total_size += 1 * this->application_size();
  for (int i = 0; i < this->application_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->application(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplicationList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplicationList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplicationList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplicationList::MergeFrom(const ApplicationList& from) {
  GOOGLE_CHECK_NE(&from, this);
  application_.MergeFrom(from.application_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplicationList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplicationList::CopyFrom(const ApplicationList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationList::IsInitialized() const {
  
  return true;
}

void ApplicationList::Swap(ApplicationList* other) {
  if (other != this) {
    application_.Swap(&other->application_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplicationList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplicationList_descriptor_;
  metadata.reflection = ApplicationList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace urpc

// @@protoc_insertion_point(global_scope)
