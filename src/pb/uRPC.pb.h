// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uRPC.proto

#ifndef PROTOBUF_uRPC_2eproto__INCLUDED
#define PROTOBUF_uRPC_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "Log.pb.h"
// @@protoc_insertion_point(includes)

namespace urpc {
namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_uRPC_2eproto();
void protobuf_AssignDesc_uRPC_2eproto();
void protobuf_ShutdownFile_uRPC_2eproto();

class RequestEnvelope;
class ReplyEnvelope;
class Application;
class ApplicationList;

enum Application_Protocol {
  Application_Protocol_TCP = 1,
  Application_Protocol_UDP = 2
};
bool Application_Protocol_IsValid(int value);
const Application_Protocol Application_Protocol_Protocol_MIN = Application_Protocol_TCP;
const Application_Protocol Application_Protocol_Protocol_MAX = Application_Protocol_UDP;
const int Application_Protocol_Protocol_ARRAYSIZE = Application_Protocol_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* Application_Protocol_descriptor();
inline const ::std::string& Application_Protocol_Name(Application_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    Application_Protocol_descriptor(), value);
}
inline bool Application_Protocol_Parse(
    const ::std::string& name, Application_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Application_Protocol>(
    Application_Protocol_descriptor(), name, value);
}
// ===================================================================

class RequestEnvelope : public ::google::protobuf::Message {
 public:
  RequestEnvelope();
  virtual ~RequestEnvelope();
  
  RequestEnvelope(const RequestEnvelope& from);
  
  inline RequestEnvelope& operator=(const RequestEnvelope& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestEnvelope& default_instance();
  
  void Swap(RequestEnvelope* other);
  
  // implements Message ----------------------------------------------
  
  RequestEnvelope* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestEnvelope& from);
  void MergeFrom(const RequestEnvelope& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string service = 1;
  inline bool has_service() const;
  inline void clear_service();
  static const int kServiceFieldNumber = 1;
  inline const ::std::string& service() const;
  inline void set_service(const ::std::string& value);
  inline void set_service(const char* value);
  inline void set_service(const char* value, size_t size);
  inline ::std::string* mutable_service();
  
  // optional int32 version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);
  
  // optional bytes request = 3;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 3;
  inline const ::std::string& request() const;
  inline void set_request(const ::std::string& value);
  inline void set_request(const char* value);
  inline void set_request(const void* value, size_t size);
  inline ::std::string* mutable_request();
  
  // @@protoc_insertion_point(class_scope:urpc.pb.RequestEnvelope)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* service_;
  static const ::std::string _default_service_;
  ::google::protobuf::int32 version_;
  ::std::string* request_;
  static const ::std::string _default_request_;
  friend void  protobuf_AddDesc_uRPC_2eproto();
  friend void protobuf_AssignDesc_uRPC_2eproto();
  friend void protobuf_ShutdownFile_uRPC_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RequestEnvelope* default_instance_;
};
// -------------------------------------------------------------------

class ReplyEnvelope : public ::google::protobuf::Message {
 public:
  ReplyEnvelope();
  virtual ~ReplyEnvelope();
  
  ReplyEnvelope(const ReplyEnvelope& from);
  
  inline ReplyEnvelope& operator=(const ReplyEnvelope& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplyEnvelope& default_instance();
  
  void Swap(ReplyEnvelope* other);
  
  // implements Message ----------------------------------------------
  
  ReplyEnvelope* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReplyEnvelope& from);
  void MergeFrom(const ReplyEnvelope& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline bool error() const;
  inline void set_error(bool value);
  
  // optional bytes reply = 2;
  inline bool has_reply() const;
  inline void clear_reply();
  static const int kReplyFieldNumber = 2;
  inline const ::std::string& reply() const;
  inline void set_reply(const ::std::string& value);
  inline void set_reply(const char* value);
  inline void set_reply(const void* value, size_t size);
  inline ::std::string* mutable_reply();
  
  // repeated .urpc.pb.Log log = 3;
  inline int log_size() const;
  inline void clear_log();
  static const int kLogFieldNumber = 3;
  inline const ::urpc::pb::Log& log(int index) const;
  inline ::urpc::pb::Log* mutable_log(int index);
  inline ::urpc::pb::Log* add_log();
  inline const ::google::protobuf::RepeatedPtrField< ::urpc::pb::Log >&
      log() const;
  inline ::google::protobuf::RepeatedPtrField< ::urpc::pb::Log >*
      mutable_log();
  
  // @@protoc_insertion_point(class_scope:urpc.pb.ReplyEnvelope)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  bool error_;
  ::std::string* reply_;
  static const ::std::string _default_reply_;
  ::google::protobuf::RepeatedPtrField< ::urpc::pb::Log > log_;
  friend void  protobuf_AddDesc_uRPC_2eproto();
  friend void protobuf_AssignDesc_uRPC_2eproto();
  friend void protobuf_ShutdownFile_uRPC_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ReplyEnvelope* default_instance_;
};
// -------------------------------------------------------------------

class Application : public ::google::protobuf::Message {
 public:
  Application();
  virtual ~Application();
  
  Application(const Application& from);
  
  inline Application& operator=(const Application& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Application& default_instance();
  
  void Swap(Application* other);
  
  // implements Message ----------------------------------------------
  
  Application* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Application& from);
  void MergeFrom(const Application& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Application_Protocol Protocol;
  static const Protocol TCP = Application_Protocol_TCP;
  static const Protocol UDP = Application_Protocol_UDP;
  static inline bool Protocol_IsValid(int value) {
    return Application_Protocol_IsValid(value);
  }
  static const Protocol Protocol_MIN =
    Application_Protocol_Protocol_MIN;
  static const Protocol Protocol_MAX =
    Application_Protocol_Protocol_MAX;
  static const int Protocol_ARRAYSIZE =
    Application_Protocol_Protocol_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Protocol_descriptor() {
    return Application_Protocol_descriptor();
  }
  static inline const ::std::string& Protocol_Name(Protocol value) {
    return Application_Protocol_Name(value);
  }
  static inline bool Protocol_Parse(const ::std::string& name,
      Protocol* value) {
    return Application_Protocol_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string service = 1;
  inline bool has_service() const;
  inline void clear_service();
  static const int kServiceFieldNumber = 1;
  inline const ::std::string& service() const;
  inline void set_service(const ::std::string& value);
  inline void set_service(const char* value);
  inline void set_service(const char* value, size_t size);
  inline ::std::string* mutable_service();
  
  // optional .urpc.pb.Application.Protocol protocol = 2;
  inline bool has_protocol() const;
  inline void clear_protocol();
  static const int kProtocolFieldNumber = 2;
  inline ::urpc::pb::Application_Protocol protocol() const;
  inline void set_protocol(::urpc::pb::Application_Protocol value);
  
  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional int32 ttl = 4;
  inline bool has_ttl() const;
  inline void clear_ttl();
  static const int kTtlFieldNumber = 4;
  inline ::google::protobuf::int32 ttl() const;
  inline void set_ttl(::google::protobuf::int32 value);
  
  // optional int32 priority = 5;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 5;
  inline ::google::protobuf::int32 priority() const;
  inline void set_priority(::google::protobuf::int32 value);
  
  // optional int32 weight = 6;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 6;
  inline ::google::protobuf::int32 weight() const;
  inline void set_weight(::google::protobuf::int32 value);
  
  // optional int32 port = 7;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 7;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:urpc.pb.Application)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* service_;
  static const ::std::string _default_service_;
  int protocol_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::int32 ttl_;
  ::google::protobuf::int32 priority_;
  ::google::protobuf::int32 weight_;
  ::google::protobuf::int32 port_;
  friend void  protobuf_AddDesc_uRPC_2eproto();
  friend void protobuf_AssignDesc_uRPC_2eproto();
  friend void protobuf_ShutdownFile_uRPC_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Application* default_instance_;
};
// -------------------------------------------------------------------

class ApplicationList : public ::google::protobuf::Message {
 public:
  ApplicationList();
  virtual ~ApplicationList();
  
  ApplicationList(const ApplicationList& from);
  
  inline ApplicationList& operator=(const ApplicationList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ApplicationList& default_instance();
  
  void Swap(ApplicationList* other);
  
  // implements Message ----------------------------------------------
  
  ApplicationList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ApplicationList& from);
  void MergeFrom(const ApplicationList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .urpc.pb.Application application = 1;
  inline int application_size() const;
  inline void clear_application();
  static const int kApplicationFieldNumber = 1;
  inline const ::urpc::pb::Application& application(int index) const;
  inline ::urpc::pb::Application* mutable_application(int index);
  inline ::urpc::pb::Application* add_application();
  inline const ::google::protobuf::RepeatedPtrField< ::urpc::pb::Application >&
      application() const;
  inline ::google::protobuf::RepeatedPtrField< ::urpc::pb::Application >*
      mutable_application();
  
  // @@protoc_insertion_point(class_scope:urpc.pb.ApplicationList)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::urpc::pb::Application > application_;
  friend void  protobuf_AddDesc_uRPC_2eproto();
  friend void protobuf_AssignDesc_uRPC_2eproto();
  friend void protobuf_ShutdownFile_uRPC_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ApplicationList* default_instance_;
};
// ===================================================================


// ===================================================================

// RequestEnvelope

// optional string service = 1;
inline bool RequestEnvelope::has_service() const {
  return _has_bit(0);
}
inline void RequestEnvelope::clear_service() {
  if (service_ != &_default_service_) {
    service_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& RequestEnvelope::service() const {
  return *service_;
}
inline void RequestEnvelope::set_service(const ::std::string& value) {
  _set_bit(0);
  if (service_ == &_default_service_) {
    service_ = new ::std::string;
  }
  service_->assign(value);
}
inline void RequestEnvelope::set_service(const char* value) {
  _set_bit(0);
  if (service_ == &_default_service_) {
    service_ = new ::std::string;
  }
  service_->assign(value);
}
inline void RequestEnvelope::set_service(const char* value, size_t size) {
  _set_bit(0);
  if (service_ == &_default_service_) {
    service_ = new ::std::string;
  }
  service_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestEnvelope::mutable_service() {
  _set_bit(0);
  if (service_ == &_default_service_) {
    service_ = new ::std::string;
  }
  return service_;
}

// optional int32 version = 2;
inline bool RequestEnvelope::has_version() const {
  return _has_bit(1);
}
inline void RequestEnvelope::clear_version() {
  version_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 RequestEnvelope::version() const {
  return version_;
}
inline void RequestEnvelope::set_version(::google::protobuf::int32 value) {
  _set_bit(1);
  version_ = value;
}

// optional bytes request = 3;
inline bool RequestEnvelope::has_request() const {
  return _has_bit(2);
}
inline void RequestEnvelope::clear_request() {
  if (request_ != &_default_request_) {
    request_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& RequestEnvelope::request() const {
  return *request_;
}
inline void RequestEnvelope::set_request(const ::std::string& value) {
  _set_bit(2);
  if (request_ == &_default_request_) {
    request_ = new ::std::string;
  }
  request_->assign(value);
}
inline void RequestEnvelope::set_request(const char* value) {
  _set_bit(2);
  if (request_ == &_default_request_) {
    request_ = new ::std::string;
  }
  request_->assign(value);
}
inline void RequestEnvelope::set_request(const void* value, size_t size) {
  _set_bit(2);
  if (request_ == &_default_request_) {
    request_ = new ::std::string;
  }
  request_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestEnvelope::mutable_request() {
  _set_bit(2);
  if (request_ == &_default_request_) {
    request_ = new ::std::string;
  }
  return request_;
}

// -------------------------------------------------------------------

// ReplyEnvelope

// optional bool error = 1;
inline bool ReplyEnvelope::has_error() const {
  return _has_bit(0);
}
inline void ReplyEnvelope::clear_error() {
  error_ = false;
  _clear_bit(0);
}
inline bool ReplyEnvelope::error() const {
  return error_;
}
inline void ReplyEnvelope::set_error(bool value) {
  _set_bit(0);
  error_ = value;
}

// optional bytes reply = 2;
inline bool ReplyEnvelope::has_reply() const {
  return _has_bit(1);
}
inline void ReplyEnvelope::clear_reply() {
  if (reply_ != &_default_reply_) {
    reply_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& ReplyEnvelope::reply() const {
  return *reply_;
}
inline void ReplyEnvelope::set_reply(const ::std::string& value) {
  _set_bit(1);
  if (reply_ == &_default_reply_) {
    reply_ = new ::std::string;
  }
  reply_->assign(value);
}
inline void ReplyEnvelope::set_reply(const char* value) {
  _set_bit(1);
  if (reply_ == &_default_reply_) {
    reply_ = new ::std::string;
  }
  reply_->assign(value);
}
inline void ReplyEnvelope::set_reply(const void* value, size_t size) {
  _set_bit(1);
  if (reply_ == &_default_reply_) {
    reply_ = new ::std::string;
  }
  reply_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReplyEnvelope::mutable_reply() {
  _set_bit(1);
  if (reply_ == &_default_reply_) {
    reply_ = new ::std::string;
  }
  return reply_;
}

// repeated .urpc.pb.Log log = 3;
inline int ReplyEnvelope::log_size() const {
  return log_.size();
}
inline void ReplyEnvelope::clear_log() {
  log_.Clear();
}
inline const ::urpc::pb::Log& ReplyEnvelope::log(int index) const {
  return log_.Get(index);
}
inline ::urpc::pb::Log* ReplyEnvelope::mutable_log(int index) {
  return log_.Mutable(index);
}
inline ::urpc::pb::Log* ReplyEnvelope::add_log() {
  return log_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::urpc::pb::Log >&
ReplyEnvelope::log() const {
  return log_;
}
inline ::google::protobuf::RepeatedPtrField< ::urpc::pb::Log >*
ReplyEnvelope::mutable_log() {
  return &log_;
}

// -------------------------------------------------------------------

// Application

// optional string service = 1;
inline bool Application::has_service() const {
  return _has_bit(0);
}
inline void Application::clear_service() {
  if (service_ != &_default_service_) {
    service_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Application::service() const {
  return *service_;
}
inline void Application::set_service(const ::std::string& value) {
  _set_bit(0);
  if (service_ == &_default_service_) {
    service_ = new ::std::string;
  }
  service_->assign(value);
}
inline void Application::set_service(const char* value) {
  _set_bit(0);
  if (service_ == &_default_service_) {
    service_ = new ::std::string;
  }
  service_->assign(value);
}
inline void Application::set_service(const char* value, size_t size) {
  _set_bit(0);
  if (service_ == &_default_service_) {
    service_ = new ::std::string;
  }
  service_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Application::mutable_service() {
  _set_bit(0);
  if (service_ == &_default_service_) {
    service_ = new ::std::string;
  }
  return service_;
}

// optional .urpc.pb.Application.Protocol protocol = 2;
inline bool Application::has_protocol() const {
  return _has_bit(1);
}
inline void Application::clear_protocol() {
  protocol_ = 1;
  _clear_bit(1);
}
inline ::urpc::pb::Application_Protocol Application::protocol() const {
  return static_cast< ::urpc::pb::Application_Protocol >(protocol_);
}
inline void Application::set_protocol(::urpc::pb::Application_Protocol value) {
  GOOGLE_DCHECK(::urpc::pb::Application_Protocol_IsValid(value));
  _set_bit(1);
  protocol_ = value;
}

// optional string name = 3;
inline bool Application::has_name() const {
  return _has_bit(2);
}
inline void Application::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Application::name() const {
  return *name_;
}
inline void Application::set_name(const ::std::string& value) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Application::set_name(const char* value) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Application::set_name(const char* value, size_t size) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Application::mutable_name() {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional int32 ttl = 4;
inline bool Application::has_ttl() const {
  return _has_bit(3);
}
inline void Application::clear_ttl() {
  ttl_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 Application::ttl() const {
  return ttl_;
}
inline void Application::set_ttl(::google::protobuf::int32 value) {
  _set_bit(3);
  ttl_ = value;
}

// optional int32 priority = 5;
inline bool Application::has_priority() const {
  return _has_bit(4);
}
inline void Application::clear_priority() {
  priority_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 Application::priority() const {
  return priority_;
}
inline void Application::set_priority(::google::protobuf::int32 value) {
  _set_bit(4);
  priority_ = value;
}

// optional int32 weight = 6;
inline bool Application::has_weight() const {
  return _has_bit(5);
}
inline void Application::clear_weight() {
  weight_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 Application::weight() const {
  return weight_;
}
inline void Application::set_weight(::google::protobuf::int32 value) {
  _set_bit(5);
  weight_ = value;
}

// optional int32 port = 7;
inline bool Application::has_port() const {
  return _has_bit(6);
}
inline void Application::clear_port() {
  port_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 Application::port() const {
  return port_;
}
inline void Application::set_port(::google::protobuf::int32 value) {
  _set_bit(6);
  port_ = value;
}

// -------------------------------------------------------------------

// ApplicationList

// repeated .urpc.pb.Application application = 1;
inline int ApplicationList::application_size() const {
  return application_.size();
}
inline void ApplicationList::clear_application() {
  application_.Clear();
}
inline const ::urpc::pb::Application& ApplicationList::application(int index) const {
  return application_.Get(index);
}
inline ::urpc::pb::Application* ApplicationList::mutable_application(int index) {
  return application_.Mutable(index);
}
inline ::urpc::pb::Application* ApplicationList::add_application() {
  return application_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::urpc::pb::Application >&
ApplicationList::application() const {
  return application_;
}
inline ::google::protobuf::RepeatedPtrField< ::urpc::pb::Application >*
ApplicationList::mutable_application() {
  return &application_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace urpc

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::urpc::pb::Application_Protocol>() {
  return ::urpc::pb::Application_Protocol_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_uRPC_2eproto__INCLUDED
